import Foundation
import CoreData

public final class <%= entity.class_name %>: <%= entity.super_class_name %> {

  <% if entity.attributes.present? %>
    enum Attribute: String {
      <% entity.attributes.each do |attribute| %>
        case <%= attribute.name.capitalize %> = "<%= attribute.name %>"
      <% end %>
    }
  <% end %>

  <% if entity.relationships.present? %>
    enum Relationship: String {
      <% entity.relationships.each do |relationship| %>
        case <%= relationship.name.capitalize %> = "<%= relationship.name %>"
      <% end %>
    }
  <% end %>

  <% if entity.fetched_properties.present? %>
    enum FetchedProperty: String {
      <% entity.fetched_properties.each do |fetched_property| %>
        case <%= fetched_property.name.capitalize %> = "<%= fetched_property.name %>"
      <% end %>
    }
  <% end %>

  <% entity.properties.each do |property| %>
    @NSManaged <%= property.access_modifier %> var <%= property.name %>: <%= property.type %>
  <% end %>

    public static let entityName = "<%= entity.name %>"

    public class func entity(inManagedObjectContext context: NSManagedObjectContext) -> NSEntityDescription? {
        return NSEntityDescription.entityForName(entityName, inManagedObjectContext: context)
    }

    public func copyFetchRequestForFetchedProperty(name: String) -> NSFetchRequest? {
        let fetchedProperty = entity.propertiesByName[name] as? NSFetchedPropertyDescription
        let fetchRequest = fetchedProperty?.fetchRequest?.copy() as? NSFetchRequest
        fetchRequest?.predicate = fetchRequest?.predicate?.predicateWithSubstitutinoVariables([
          "FETCH_SOURCE": self,
          "FETCHED_PROPERTY": fetchedProperty,
        ])
        return fetchRequest
    }
}
